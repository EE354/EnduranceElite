import {
  addDay,
  ancestor,
  assign,
  bgEvent,
  cloneDate,
  createDate,
  createEventChunk,
  createEventClasses,
  createEventContent,
  datesEqual,
  debounce,
  eventIntersects,
  height,
  helperEvent,
  intl,
  max,
  outsideEvent,
  prepareEventChunks,
  previewEvent,
  rect,
  repositionEvent,
  setContent,
  setMidnight,
  setPayload,
  subtractDay,
  toEventWithLocalDates,
  toViewWithLocalDates
} from "./chunk-YWAZIUQ2.js";
import {
  derived,
  writable
} from "./chunk-2XIZ5LLL.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  afterUpdate,
  append_hydration_dev,
  attr_dev,
  binding_callbacks,
  bubble,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  claim_text,
  component_subscribe,
  construct_svelte_component_dev,
  create_component,
  create_slot,
  destroy_component,
  destroy_each,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  getContext,
  get_all_dirty_from_scope,
  get_slot_changes,
  group_outros,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  mount_component,
  noop,
  onMount,
  outro_and_destroy_block,
  run_all,
  safe_not_equal,
  set_data_dev,
  set_store_value,
  space,
  stop_propagation,
  text,
  tick,
  transition_in,
  transition_out,
  update_keyed_each,
  update_slot_base,
  validate_each_argument,
  validate_each_keys,
  validate_slots,
  validate_store
} from "./chunk-PBX6AF7V.js";

// node_modules/@event-calendar/day-grid/src/stores.js
function days(state) {
  return derived([state.date, state.firstDay, state.hiddenDays], ([$date, $firstDay, $hiddenDays]) => {
    let days2 = [];
    let day = cloneDate($date);
    let max2 = 7;
    while (day.getUTCDay() !== $firstDay && max2) {
      subtractDay(day);
      --max2;
    }
    for (let i = 0; i < 7; ++i) {
      if (!$hiddenDays.includes(day.getUTCDay())) {
        days2.push(cloneDate(day));
      }
      addDay(day);
    }
    return days2;
  });
}

// node_modules/@event-calendar/day-grid/src/Header.svelte
var file = "node_modules\\@event-calendar\\day-grid\\src\\Header.svelte";
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  return child_ctx;
}
function create_each_block(ctx) {
  let div;
  let t_value = (
    /*$_intlDayHeader*/
    ctx[2].format(
      /*day*/
      ctx[6]
    ) + ""
  );
  let t;
  let div_class_value;
  const block = {
    c: function create() {
      div = element("div");
      t = text(t_value);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      t = claim_text(div_nodes, t_value);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", div_class_value = /*$theme*/
      ctx[0].day);
      add_location(div, file, 9, 12, 226);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      append_hydration_dev(div, t);
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*$_intlDayHeader, $_days*/
      6 && t_value !== (t_value = /*$_intlDayHeader*/
      ctx2[2].format(
        /*day*/
        ctx2[6]
      ) + ""))
        set_data_dev(t, t_value);
      if (dirty & /*$theme*/
      1 && div_class_value !== (div_class_value = /*$theme*/
      ctx2[0].day)) {
        attr_dev(div, "class", div_class_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(9:8) {#each $_days as day}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let div2;
  let div0;
  let div0_class_value;
  let t;
  let div1;
  let div1_class_value;
  let div2_class_value;
  let each_value = (
    /*$_days*/
    ctx[1]
  );
  validate_each_argument(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      div2 = element("div");
      div0 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t = space();
      div1 = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      div0 = claim_element(div2_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(div0_nodes);
      }
      div0_nodes.forEach(detach_dev);
      t = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      children(div1).forEach(detach_dev);
      div2_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[0].days);
      add_location(div0, file, 7, 4, 156);
      attr_dev(div1, "class", div1_class_value = /*$theme*/
      ctx[0].hiddenScroll);
      add_location(div1, file, 12, 4, 319);
      attr_dev(div2, "class", div2_class_value = /*$theme*/
      ctx[0].header);
      add_location(div2, file, 6, 0, 122);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div2, anchor);
      append_hydration_dev(div2, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      append_hydration_dev(div2, t);
      append_hydration_dev(div2, div1);
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*$theme, $_intlDayHeader, $_days*/
      7) {
        each_value = /*$_days*/
        ctx2[1];
        validate_each_argument(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div0, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & /*$theme*/
      1 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx2[0].days)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (dirty & /*$theme*/
      1 && div1_class_value !== (div1_class_value = /*$theme*/
      ctx2[0].hiddenScroll)) {
        attr_dev(div1, "class", div1_class_value);
      }
      if (dirty & /*$theme*/
      1 && div2_class_value !== (div2_class_value = /*$theme*/
      ctx2[0].header)) {
        attr_dev(div2, "class", div2_class_value);
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div2);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let $theme;
  let $_days;
  let $_intlDayHeader;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Header", slots, []);
  let { theme, _intlDayHeader, _days } = getContext("state");
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(0, $theme = value));
  validate_store(_intlDayHeader, "_intlDayHeader");
  component_subscribe($$self, _intlDayHeader, (value) => $$invalidate(2, $_intlDayHeader = value));
  validate_store(_days, "_days");
  component_subscribe($$self, _days, (value) => $$invalidate(1, $_days = value));
  const writable_props = [];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Header> was created with unknown prop '${key}'`);
  });
  $$self.$capture_state = () => ({
    getContext,
    theme,
    _intlDayHeader,
    _days,
    $theme,
    $_days,
    $_intlDayHeader
  });
  $$self.$inject_state = ($$props2) => {
    if ("theme" in $$props2)
      $$invalidate(3, theme = $$props2.theme);
    if ("_intlDayHeader" in $$props2)
      $$invalidate(4, _intlDayHeader = $$props2._intlDayHeader);
    if ("_days" in $$props2)
      $$invalidate(5, _days = $$props2._days);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [$theme, $_days, $_intlDayHeader, theme, _intlDayHeader, _days];
}
var Header = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Header",
      options,
      id: create_fragment.name
    });
  }
};
var Header_default = Header;

// node_modules/@event-calendar/day-grid/src/Body.svelte
var file2 = "node_modules\\@event-calendar\\day-grid\\src\\Body.svelte";
function create_fragment2(ctx) {
  let div1;
  let div0;
  let div0_class_value;
  let div1_class_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[7].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    null
  );
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      if (default_slot)
        default_slot.l(div0_nodes);
      div0_nodes.forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[0].content);
      add_location(div0, file2, 10, 4, 236);
      attr_dev(div1, "class", div1_class_value = /*$theme*/
      ctx[0].body + /*$dayMaxEvents*/
      (ctx[1] === true ? " " + /*$theme*/
      ctx[0].uniform : ""));
      add_location(div1, file2, 6, 0, 122);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      append_hydration_dev(div1, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      ctx[8](div1);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        64)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*$theme*/
      1 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx2[0].content)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (!current || dirty & /*$theme, $dayMaxEvents*/
      3 && div1_class_value !== (div1_class_value = /*$theme*/
      ctx2[0].body + /*$dayMaxEvents*/
      (ctx2[1] === true ? " " + /*$theme*/
      ctx2[0].uniform : ""))) {
        attr_dev(div1, "class", div1_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      if (default_slot)
        default_slot.d(detaching);
      ctx[8](null);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  let $theme;
  let $dayMaxEvents;
  let $_bodyEl;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Body", slots, ["default"]);
  let { dayMaxEvents, _bodyEl, theme } = getContext("state");
  validate_store(dayMaxEvents, "dayMaxEvents");
  component_subscribe($$self, dayMaxEvents, (value) => $$invalidate(1, $dayMaxEvents = value));
  validate_store(_bodyEl, "_bodyEl");
  component_subscribe($$self, _bodyEl, (value) => $$invalidate(2, $_bodyEl = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(0, $theme = value));
  const writable_props = [];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Body> was created with unknown prop '${key}'`);
  });
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      $_bodyEl = $$value;
      _bodyEl.set($_bodyEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("$$scope" in $$props2)
      $$invalidate(6, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    dayMaxEvents,
    _bodyEl,
    theme,
    $theme,
    $dayMaxEvents,
    $_bodyEl
  });
  $$self.$inject_state = ($$props2) => {
    if ("dayMaxEvents" in $$props2)
      $$invalidate(3, dayMaxEvents = $$props2.dayMaxEvents);
    if ("_bodyEl" in $$props2)
      $$invalidate(4, _bodyEl = $$props2._bodyEl);
    if ("theme" in $$props2)
      $$invalidate(5, theme = $$props2.theme);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    $theme,
    $dayMaxEvents,
    $_bodyEl,
    dayMaxEvents,
    _bodyEl,
    theme,
    $$scope,
    slots,
    div1_binding
  ];
}
var Body = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Body",
      options,
      id: create_fragment2.name
    });
  }
};
var Body_default = Body;

// node_modules/@event-calendar/day-grid/src/Event.svelte
var file3 = "node_modules\\@event-calendar\\day-grid\\src\\Event.svelte";
function create_fragment3(ctx) {
  let div1;
  let div0;
  let div0_class_value;
  let setContent_action;
  let t;
  let switch_instance;
  let current;
  let mounted;
  let dispose;
  var switch_value = (
    /*$_interaction*/
    ctx[7].resizer
  );
  function switch_props(ctx2) {
    return {
      props: { event: (
        /*event*/
        ctx2[0]
      ) },
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    switch_instance.$on("pointerdown", function() {
      if (is_function(
        /*createDragHandler*/
        ctx[32](
          /*$_interaction*/
          ctx[7],
          true
        )
      ))
        ctx[32](
          /*$_interaction*/
          ctx[7],
          true
        ).apply(this, arguments);
    });
  }
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      t = space();
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true, style: true });
      var div1_nodes = children(div1);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      children(div0).forEach(detach_dev);
      t = claim_space(div1_nodes);
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, div1_nodes);
      div1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[1].eventBody);
      add_location(div0, file3, 149, 4, 4480);
      attr_dev(
        div1,
        "class",
        /*classes*/
        ctx[3]
      );
      attr_dev(
        div1,
        "style",
        /*style*/
        ctx[4]
      );
      add_location(div1, file3, 140, 0, 4164);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      append_hydration_dev(div1, div0);
      append_hydration_dev(div1, t);
      if (switch_instance)
        mount_component(switch_instance, div1, null);
      ctx[50](div1);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(setContent_action = setContent.call(
            null,
            div0,
            /*content*/
            ctx[5]
          )),
          listen_dev(
            div1,
            "click",
            function() {
              if (is_function(
                /*createHandler*/
                ctx[31](
                  /*$eventClick*/
                  ctx[8],
                  /*display*/
                  ctx[6]
                )
              ))
                ctx[31](
                  /*$eventClick*/
                  ctx[8],
                  /*display*/
                  ctx[6]
                ).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div1,
            "mouseenter",
            function() {
              if (is_function(
                /*createHandler*/
                ctx[31](
                  /*$eventMouseEnter*/
                  ctx[9],
                  /*display*/
                  ctx[6]
                )
              ))
                ctx[31](
                  /*$eventMouseEnter*/
                  ctx[9],
                  /*display*/
                  ctx[6]
                ).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div1,
            "mouseleave",
            function() {
              if (is_function(
                /*createHandler*/
                ctx[31](
                  /*$eventMouseLeave*/
                  ctx[10],
                  /*display*/
                  ctx[6]
                )
              ))
                ctx[31](
                  /*$eventMouseLeave*/
                  ctx[10],
                  /*display*/
                  ctx[6]
                ).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div1,
            "pointerdown",
            function() {
              if (is_function(!helperEvent(
                /*display*/
                ctx[6]
              ) && /*createDragHandler*/
              ctx[32](
                /*$_interaction*/
                ctx[7]
              )))
                (!helperEvent(
                  /*display*/
                  ctx[6]
                ) && /*createDragHandler*/
                ctx[32](
                  /*$_interaction*/
                  ctx[7]
                )).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty[0] & /*$theme*/
      2 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx[1].eventBody)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (setContent_action && is_function(setContent_action.update) && dirty[0] & /*content*/
      32)
        setContent_action.update.call(
          null,
          /*content*/
          ctx[5]
        );
      const switch_instance_changes = {};
      if (dirty[0] & /*event*/
      1)
        switch_instance_changes.event = /*event*/
        ctx[0];
      if (dirty[0] & /*$_interaction*/
      128 && switch_value !== (switch_value = /*$_interaction*/
      ctx[7].resizer)) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
          switch_instance.$on("pointerdown", function() {
            if (is_function(
              /*createDragHandler*/
              ctx[32](
                /*$_interaction*/
                ctx[7],
                true
              )
            ))
              ctx[32](
                /*$_interaction*/
                ctx[7],
                true
              ).apply(this, arguments);
          });
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, div1, null);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
      if (!current || dirty[0] & /*classes*/
      8) {
        attr_dev(
          div1,
          "class",
          /*classes*/
          ctx[3]
        );
      }
      if (!current || dirty[0] & /*style*/
      16) {
        attr_dev(
          div1,
          "style",
          /*style*/
          ctx[4]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      if (switch_instance)
        destroy_component(switch_instance);
      ctx[50](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let $_hiddenEvents;
  let $dayMaxEvents;
  let $_popupDate;
  let $_interaction;
  let $_view;
  let $eventDidMount;
  let $_intlEventTime;
  let $theme;
  let $eventContent;
  let $displayEventEnd;
  let $eventClassNames;
  let $_iClasses;
  let $eventTextColor;
  let $_resTxtColor;
  let $eventColor;
  let $eventBackgroundColor;
  let $_resBgColor;
  let $eventClick;
  let $eventMouseEnter;
  let $eventMouseLeave;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Event", slots, []);
  let { chunk } = $$props;
  let { longChunks = {} } = $$props;
  let { inPopup = false } = $$props;
  let { dayMaxEvents, displayEventEnd, eventBackgroundColor, eventTextColor, eventClick, eventColor, eventContent, eventClassNames, eventDidMount, eventMouseEnter, eventMouseLeave, theme, _view, _intlEventTime, _interaction, _iClasses, _resBgColor, _resTxtColor, _hiddenEvents, _popupDate } = getContext("state");
  validate_store(dayMaxEvents, "dayMaxEvents");
  component_subscribe($$self, dayMaxEvents, (value) => $$invalidate(53, $dayMaxEvents = value));
  validate_store(displayEventEnd, "displayEventEnd");
  component_subscribe($$self, displayEventEnd, (value) => $$invalidate(42, $displayEventEnd = value));
  validate_store(eventBackgroundColor, "eventBackgroundColor");
  component_subscribe($$self, eventBackgroundColor, (value) => $$invalidate(48, $eventBackgroundColor = value));
  validate_store(eventTextColor, "eventTextColor");
  component_subscribe($$self, eventTextColor, (value) => $$invalidate(45, $eventTextColor = value));
  validate_store(eventClick, "eventClick");
  component_subscribe($$self, eventClick, (value) => $$invalidate(8, $eventClick = value));
  validate_store(eventColor, "eventColor");
  component_subscribe($$self, eventColor, (value) => $$invalidate(47, $eventColor = value));
  validate_store(eventContent, "eventContent");
  component_subscribe($$self, eventContent, (value) => $$invalidate(41, $eventContent = value));
  validate_store(eventClassNames, "eventClassNames");
  component_subscribe($$self, eventClassNames, (value) => $$invalidate(43, $eventClassNames = value));
  validate_store(eventDidMount, "eventDidMount");
  component_subscribe($$self, eventDidMount, (value) => $$invalidate(55, $eventDidMount = value));
  validate_store(eventMouseEnter, "eventMouseEnter");
  component_subscribe($$self, eventMouseEnter, (value) => $$invalidate(9, $eventMouseEnter = value));
  validate_store(eventMouseLeave, "eventMouseLeave");
  component_subscribe($$self, eventMouseLeave, (value) => $$invalidate(10, $eventMouseLeave = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(1, $theme = value));
  validate_store(_view, "_view");
  component_subscribe($$self, _view, (value) => $$invalidate(39, $_view = value));
  validate_store(_intlEventTime, "_intlEventTime");
  component_subscribe($$self, _intlEventTime, (value) => $$invalidate(40, $_intlEventTime = value));
  validate_store(_interaction, "_interaction");
  component_subscribe($$self, _interaction, (value) => $$invalidate(7, $_interaction = value));
  validate_store(_iClasses, "_iClasses");
  component_subscribe($$self, _iClasses, (value) => $$invalidate(44, $_iClasses = value));
  validate_store(_resBgColor, "_resBgColor");
  component_subscribe($$self, _resBgColor, (value) => $$invalidate(49, $_resBgColor = value));
  validate_store(_resTxtColor, "_resTxtColor");
  component_subscribe($$self, _resTxtColor, (value) => $$invalidate(46, $_resTxtColor = value));
  validate_store(_hiddenEvents, "_hiddenEvents");
  component_subscribe($$self, _hiddenEvents, (value) => $$invalidate(52, $_hiddenEvents = value));
  validate_store(_popupDate, "_popupDate");
  component_subscribe($$self, _popupDate, (value) => $$invalidate(54, $_popupDate = value));
  let el;
  let event;
  let classes;
  let style;
  let content;
  let timeText;
  let margin = 1;
  let hidden = false;
  let display;
  onMount(() => {
    if (is_function($eventDidMount)) {
      $eventDidMount({
        event: toEventWithLocalDates(event),
        timeText,
        el,
        view: toViewWithLocalDates($_view)
      });
    }
  });
  function createHandler(fn, display2) {
    return !helperEvent(display2) && is_function(fn) ? (jsEvent) => fn({
      event: toEventWithLocalDates(event),
      el,
      jsEvent,
      view: toViewWithLocalDates($_view)
    }) : void 0;
  }
  function createDragHandler(interaction, resize) {
    return interaction.action ? (jsEvent) => $_interaction.action.drag(event, jsEvent, resize, inPopup ? $_popupDate : void 0) : void 0;
  }
  function reposition() {
    if (!el || previewEvent(display) || inPopup) {
      return;
    }
    $$invalidate(37, margin = repositionEvent(chunk, longChunks, height(el)));
    if ($dayMaxEvents === true) {
      hide();
    } else {
      $$invalidate(38, hidden = false);
    }
  }
  function hide() {
    let dayEl = ancestor(el, 2);
    let h = height(dayEl) - height(dayEl.firstElementChild) - footHeight(dayEl);
    $$invalidate(38, hidden = chunk.bottom > h);
    let update = false;
    for (let date of chunk.dates) {
      let hiddenEvents = $_hiddenEvents[date.getTime()];
      if (hiddenEvents) {
        let size = hiddenEvents.size;
        if (hidden) {
          hiddenEvents.add(chunk.event);
        } else {
          hiddenEvents.delete(chunk.event);
        }
        if (size !== hiddenEvents.size) {
          update = true;
        }
      }
    }
    if (update) {
      _hiddenEvents.set($_hiddenEvents);
    }
  }
  function footHeight(dayEl) {
    let h = 0;
    for (let i = 0; i < chunk.days; ++i) {
      h = max(h, height(dayEl.lastElementChild));
      dayEl = dayEl.nextElementSibling;
      if (!dayEl) {
        break;
      }
    }
    return h;
  }
  $$self.$$.on_mount.push(function() {
    if (chunk === void 0 && !("chunk" in $$props || $$self.$$.bound[$$self.$$.props["chunk"]])) {
      console.warn("<Event> was created without expected prop 'chunk'");
    }
  });
  const writable_props = ["chunk", "longChunks", "inPopup"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Event> was created with unknown prop '${key}'`);
  });
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(2, el);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("chunk" in $$props2)
      $$invalidate(33, chunk = $$props2.chunk);
    if ("longChunks" in $$props2)
      $$invalidate(34, longChunks = $$props2.longChunks);
    if ("inPopup" in $$props2)
      $$invalidate(35, inPopup = $$props2.inPopup);
  };
  $$self.$capture_state = () => ({
    getContext,
    onMount,
    is_function,
    ancestor,
    createEventClasses,
    createEventContent,
    height,
    max,
    toEventWithLocalDates,
    toViewWithLocalDates,
    setContent,
    repositionEvent,
    helperEvent,
    previewEvent,
    chunk,
    longChunks,
    inPopup,
    dayMaxEvents,
    displayEventEnd,
    eventBackgroundColor,
    eventTextColor,
    eventClick,
    eventColor,
    eventContent,
    eventClassNames,
    eventDidMount,
    eventMouseEnter,
    eventMouseLeave,
    theme,
    _view,
    _intlEventTime,
    _interaction,
    _iClasses,
    _resBgColor,
    _resTxtColor,
    _hiddenEvents,
    _popupDate,
    el,
    event,
    classes,
    style,
    content,
    timeText,
    margin,
    hidden,
    display,
    createHandler,
    createDragHandler,
    reposition,
    hide,
    footHeight,
    $_hiddenEvents,
    $dayMaxEvents,
    $_popupDate,
    $_interaction,
    $_view,
    $eventDidMount,
    $_intlEventTime,
    $theme,
    $eventContent,
    $displayEventEnd,
    $eventClassNames,
    $_iClasses,
    $eventTextColor,
    $_resTxtColor,
    $eventColor,
    $eventBackgroundColor,
    $_resBgColor,
    $eventClick,
    $eventMouseEnter,
    $eventMouseLeave
  });
  $$self.$inject_state = ($$props2) => {
    if ("chunk" in $$props2)
      $$invalidate(33, chunk = $$props2.chunk);
    if ("longChunks" in $$props2)
      $$invalidate(34, longChunks = $$props2.longChunks);
    if ("inPopup" in $$props2)
      $$invalidate(35, inPopup = $$props2.inPopup);
    if ("dayMaxEvents" in $$props2)
      $$invalidate(11, dayMaxEvents = $$props2.dayMaxEvents);
    if ("displayEventEnd" in $$props2)
      $$invalidate(12, displayEventEnd = $$props2.displayEventEnd);
    if ("eventBackgroundColor" in $$props2)
      $$invalidate(13, eventBackgroundColor = $$props2.eventBackgroundColor);
    if ("eventTextColor" in $$props2)
      $$invalidate(14, eventTextColor = $$props2.eventTextColor);
    if ("eventClick" in $$props2)
      $$invalidate(15, eventClick = $$props2.eventClick);
    if ("eventColor" in $$props2)
      $$invalidate(16, eventColor = $$props2.eventColor);
    if ("eventContent" in $$props2)
      $$invalidate(17, eventContent = $$props2.eventContent);
    if ("eventClassNames" in $$props2)
      $$invalidate(18, eventClassNames = $$props2.eventClassNames);
    if ("eventDidMount" in $$props2)
      $$invalidate(19, eventDidMount = $$props2.eventDidMount);
    if ("eventMouseEnter" in $$props2)
      $$invalidate(20, eventMouseEnter = $$props2.eventMouseEnter);
    if ("eventMouseLeave" in $$props2)
      $$invalidate(21, eventMouseLeave = $$props2.eventMouseLeave);
    if ("theme" in $$props2)
      $$invalidate(22, theme = $$props2.theme);
    if ("_view" in $$props2)
      $$invalidate(23, _view = $$props2._view);
    if ("_intlEventTime" in $$props2)
      $$invalidate(24, _intlEventTime = $$props2._intlEventTime);
    if ("_interaction" in $$props2)
      $$invalidate(25, _interaction = $$props2._interaction);
    if ("_iClasses" in $$props2)
      $$invalidate(26, _iClasses = $$props2._iClasses);
    if ("_resBgColor" in $$props2)
      $$invalidate(27, _resBgColor = $$props2._resBgColor);
    if ("_resTxtColor" in $$props2)
      $$invalidate(28, _resTxtColor = $$props2._resTxtColor);
    if ("_hiddenEvents" in $$props2)
      $$invalidate(29, _hiddenEvents = $$props2._hiddenEvents);
    if ("_popupDate" in $$props2)
      $$invalidate(30, _popupDate = $$props2._popupDate);
    if ("el" in $$props2)
      $$invalidate(2, el = $$props2.el);
    if ("event" in $$props2)
      $$invalidate(0, event = $$props2.event);
    if ("classes" in $$props2)
      $$invalidate(3, classes = $$props2.classes);
    if ("style" in $$props2)
      $$invalidate(4, style = $$props2.style);
    if ("content" in $$props2)
      $$invalidate(5, content = $$props2.content);
    if ("timeText" in $$props2)
      timeText = $$props2.timeText;
    if ("margin" in $$props2)
      $$invalidate(37, margin = $$props2.margin);
    if ("hidden" in $$props2)
      $$invalidate(38, hidden = $$props2.hidden);
    if ("display" in $$props2)
      $$invalidate(6, display = $$props2.display);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[1] & /*chunk*/
    4) {
      $:
        $$invalidate(0, event = chunk.event);
    }
    if ($$self.$$.dirty[0] & /*event, style, $theme*/
    19 | $$self.$$.dirty[1] & /*$_resBgColor, $eventBackgroundColor, $eventColor, $_resTxtColor, $eventTextColor, chunk, margin, hidden, $_iClasses, $eventClassNames, $_view*/
    520644) {
      $: {
        $$invalidate(6, display = event.display);
        let bgColor = event.backgroundColor || $_resBgColor(event) || $eventBackgroundColor || $eventColor;
        let txtColor = event.textColor || $_resTxtColor(event) || $eventTextColor;
        $$invalidate(4, style = `width:calc(${chunk.days * 100}% + ${(chunk.days - 1) * 7}px);margin-top:${margin}px;`);
        if (bgColor) {
          $$invalidate(4, style += `background-color:${bgColor};`);
        }
        if (txtColor) {
          $$invalidate(4, style += `color:${txtColor};`);
        }
        if (hidden) {
          $$invalidate(4, style += "visibility:hidden;");
        }
        $$invalidate(3, classes = [
          $theme.event,
          ...$_iClasses([], event),
          ...createEventClasses($eventClassNames, event, $_view)
        ].join(" "));
      }
    }
    if ($$self.$$.dirty[0] & /*$theme*/
    2 | $$self.$$.dirty[1] & /*chunk, $displayEventEnd, $eventContent, $_intlEventTime, $_view*/
    3844) {
      $:
        $$invalidate(5, [timeText, content] = createEventContent(chunk, $displayEventEnd, $eventContent, $theme, $_intlEventTime, $_view), content);
    }
  };
  return [
    event,
    $theme,
    el,
    classes,
    style,
    content,
    display,
    $_interaction,
    $eventClick,
    $eventMouseEnter,
    $eventMouseLeave,
    dayMaxEvents,
    displayEventEnd,
    eventBackgroundColor,
    eventTextColor,
    eventClick,
    eventColor,
    eventContent,
    eventClassNames,
    eventDidMount,
    eventMouseEnter,
    eventMouseLeave,
    theme,
    _view,
    _intlEventTime,
    _interaction,
    _iClasses,
    _resBgColor,
    _resTxtColor,
    _hiddenEvents,
    _popupDate,
    createHandler,
    createDragHandler,
    chunk,
    longChunks,
    inPopup,
    reposition,
    margin,
    hidden,
    $_view,
    $_intlEventTime,
    $eventContent,
    $displayEventEnd,
    $eventClassNames,
    $_iClasses,
    $eventTextColor,
    $_resTxtColor,
    $eventColor,
    $eventBackgroundColor,
    $_resBgColor,
    div1_binding
  ];
}
var Event = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance3,
      create_fragment3,
      safe_not_equal,
      {
        chunk: 33,
        longChunks: 34,
        inPopup: 35,
        reposition: 36
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Event",
      options,
      id: create_fragment3.name
    });
  }
  get chunk() {
    throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set chunk(value) {
    throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get longChunks() {
    throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set longChunks(value) {
    throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get inPopup() {
    throw new Error("<Event>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set inPopup(value) {
    throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get reposition() {
    return this.$$.ctx[36];
  }
  set reposition(value) {
    throw new Error("<Event>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Event_default = Event;

// node_modules/@event-calendar/day-grid/src/Popup.svelte
var file4 = "node_modules\\@event-calendar\\day-grid\\src\\Popup.svelte";
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[18] = list[i];
  return child_ctx;
}
function create_each_block2(key_1, ctx) {
  let first;
  let event;
  let current;
  event = new Event_default({
    props: { chunk: (
      /*chunk*/
      ctx[18]
    ), inPopup: true },
    $$inline: true
  });
  const block = {
    key: key_1,
    first: null,
    c: function create() {
      first = empty();
      create_component(event.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      first = empty();
      claim_component(event.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      this.first = first;
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, first, anchor);
      mount_component(event, target, anchor);
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      const event_changes = {};
      if (dirty & /*$_popupChunks*/
      1)
        event_changes.chunk = /*chunk*/
        ctx[18];
      event.$set(event_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(first);
      destroy_component(event, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block2.name,
    type: "each",
    source: "(83:8) {#each $_popupChunks as chunk (chunk.event)}",
    ctx
  });
  return block;
}
function create_fragment4(ctx) {
  let div2;
  let div0;
  let t0_value = (
    /*$_intlDayPopover*/
    ctx[5].format(
      /*$_popupDate*/
      ctx[3]
    ) + ""
  );
  let t0;
  let t1;
  let a;
  let t2;
  let div0_class_value;
  let t3;
  let div1;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let div1_class_value;
  let div2_class_value;
  let outsideEvent_action;
  let current;
  let mounted;
  let dispose;
  let each_value = (
    /*$_popupChunks*/
    ctx[0]
  );
  validate_each_argument(each_value);
  const get_key = (ctx2) => (
    /*chunk*/
    ctx2[18].event
  );
  validate_each_keys(ctx, each_value, get_each_context2, get_key);
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context2(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block2(key, child_ctx));
  }
  const block = {
    c: function create() {
      div2 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      a = element("a");
      t2 = text("×");
      t3 = space();
      div1 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      this.h();
    },
    l: function claim(nodes) {
      div2 = claim_element(nodes, "DIV", { class: true, style: true });
      var div2_nodes = children(div2);
      div0 = claim_element(div2_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      t0 = claim_text(div0_nodes, t0_value);
      t1 = claim_space(div0_nodes);
      a = claim_element(div0_nodes, "A", {});
      var a_nodes = children(a);
      t2 = claim_text(a_nodes, "×");
      a_nodes.forEach(detach_dev);
      div0_nodes.forEach(detach_dev);
      t3 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(div1_nodes);
      }
      div1_nodes.forEach(detach_dev);
      div2_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(a, file4, 80, 73, 2373);
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[4].dayHead);
      add_location(div0, file4, 80, 4, 2304);
      attr_dev(div1, "class", div1_class_value = /*$theme*/
      ctx[4].events);
      add_location(div1, file4, 81, 4, 2431);
      attr_dev(div2, "class", div2_class_value = /*$theme*/
      ctx[4].popup);
      attr_dev(
        div2,
        "style",
        /*style*/
        ctx[2]
      );
      add_location(div2, file4, 72, 0, 2110);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div2, anchor);
      append_hydration_dev(div2, div0);
      append_hydration_dev(div0, t0);
      append_hydration_dev(div0, t1);
      append_hydration_dev(div0, a);
      append_hydration_dev(a, t2);
      append_hydration_dev(div2, t3);
      append_hydration_dev(div2, div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
      ctx[14](div2);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(a, "click", stop_propagation(
            /*close*/
            ctx[11]
          ), false, false, true, false),
          action_destroyer(outsideEvent_action = outsideEvent.call(null, div2, "pointerdown")),
          listen_dev(div2, "pointerdown", stop_propagation(
            /*pointerdown_handler*/
            ctx[13]
          ), false, false, true, false),
          listen_dev(
            div2,
            "pointerdownoutside",
            /*handlePointerDownOutside*/
            ctx[12],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if ((!current || dirty & /*$_intlDayPopover, $_popupDate*/
      40) && t0_value !== (t0_value = /*$_intlDayPopover*/
      ctx2[5].format(
        /*$_popupDate*/
        ctx2[3]
      ) + ""))
        set_data_dev(t0, t0_value);
      if (!current || dirty & /*$theme*/
      16 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx2[4].dayHead)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (dirty & /*$_popupChunks*/
      1) {
        each_value = /*$_popupChunks*/
        ctx2[0];
        validate_each_argument(each_value);
        group_outros();
        validate_each_keys(ctx2, each_value, get_each_context2, get_key);
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div1, outro_and_destroy_block, create_each_block2, null, get_each_context2);
        check_outros();
      }
      if (!current || dirty & /*$theme*/
      16 && div1_class_value !== (div1_class_value = /*$theme*/
      ctx2[4].events)) {
        attr_dev(div1, "class", div1_class_value);
      }
      if (!current || dirty & /*$theme*/
      16 && div2_class_value !== (div2_class_value = /*$theme*/
      ctx2[4].popup)) {
        attr_dev(div2, "class", div2_class_value);
      }
      if (!current || dirty & /*style*/
      4) {
        attr_dev(
          div2,
          "style",
          /*style*/
          ctx2[2]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div2);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      ctx[14](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment4.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance4($$self, $$props, $$invalidate) {
  let $_interaction;
  let $_popupDate;
  let $_popupChunks;
  let $theme;
  let $_intlDayPopover;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Popup", slots, []);
  let { theme, _interaction, _intlDayPopover, _popupDate, _popupChunks } = getContext("state");
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(4, $theme = value));
  validate_store(_interaction, "_interaction");
  component_subscribe($$self, _interaction, (value) => $$invalidate(15, $_interaction = value));
  validate_store(_intlDayPopover, "_intlDayPopover");
  component_subscribe($$self, _intlDayPopover, (value) => $$invalidate(5, $_intlDayPopover = value));
  validate_store(_popupDate, "_popupDate");
  component_subscribe($$self, _popupDate, (value) => $$invalidate(3, $_popupDate = value));
  validate_store(_popupChunks, "_popupChunks");
  component_subscribe($$self, _popupChunks, (value) => $$invalidate(0, $_popupChunks = value));
  let el;
  let style = "";
  function position() {
    let dayEl = ancestor(el, 1);
    let bodyEl = ancestor(dayEl, 3);
    let popupRect = rect(el);
    let dayRect = rect(dayEl);
    let bodyRect = rect(bodyEl);
    if (!dayEl.previousElementSibling) {
      $$invalidate(2, style = "left:0;");
    } else if (!dayEl.nextElementSibling) {
      $$invalidate(2, style = "right:0;");
    } else {
      let left = (dayEl.offsetWidth - popupRect.width) / 2;
      $$invalidate(2, style = `left:${left}px;`);
    }
    let top;
    if (popupRect.height >= bodyRect.height) {
      top = bodyRect.top - dayRect.top;
      let bottom = dayRect.bottom - bodyRect.bottom;
      $$invalidate(2, style += `bottom:${bottom}px;`);
    } else {
      top = (dayRect.height - popupRect.height) / 2;
      if (dayRect.top + top < bodyRect.top) {
        top = bodyRect.top - dayRect.top;
      } else if (dayRect.top + top + popupRect.height > bodyRect.bottom) {
        top = bodyRect.bottom - dayRect.top - popupRect.height;
      }
    }
    $$invalidate(2, style += `top:${top}px;`);
  }
  function reposition() {
    if (el) {
      $$invalidate(2, style = "");
      tick().then(() => {
        if ($_popupChunks.length) {
          position();
        } else {
          close();
        }
      });
    }
  }
  function close(e) {
    set_store_value(_popupDate, $_popupDate = null, $_popupDate);
  }
  function handlePointerDownOutside(e) {
    var _a;
    close();
    (_a = $_interaction.action) == null ? void 0 : _a.noClick();
  }
  const writable_props = [];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Popup> was created with unknown prop '${key}'`);
  });
  function pointerdown_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div2_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(1, el);
    });
  }
  $$self.$capture_state = () => ({
    getContext,
    tick,
    ancestor,
    rect,
    outsideEvent,
    Event: Event_default,
    theme,
    _interaction,
    _intlDayPopover,
    _popupDate,
    _popupChunks,
    el,
    style,
    position,
    reposition,
    close,
    handlePointerDownOutside,
    $_interaction,
    $_popupDate,
    $_popupChunks,
    $theme,
    $_intlDayPopover
  });
  $$self.$inject_state = ($$props2) => {
    if ("theme" in $$props2)
      $$invalidate(6, theme = $$props2.theme);
    if ("_interaction" in $$props2)
      $$invalidate(7, _interaction = $$props2._interaction);
    if ("_intlDayPopover" in $$props2)
      $$invalidate(8, _intlDayPopover = $$props2._intlDayPopover);
    if ("_popupDate" in $$props2)
      $$invalidate(9, _popupDate = $$props2._popupDate);
    if ("_popupChunks" in $$props2)
      $$invalidate(10, _popupChunks = $$props2._popupChunks);
    if ("el" in $$props2)
      $$invalidate(1, el = $$props2.el);
    if ("style" in $$props2)
      $$invalidate(2, style = $$props2.style);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$_popupChunks*/
    1) {
      $:
        if ($_popupChunks) {
          reposition();
        }
    }
  };
  return [
    $_popupChunks,
    el,
    style,
    $_popupDate,
    $theme,
    $_intlDayPopover,
    theme,
    _interaction,
    _intlDayPopover,
    _popupDate,
    _popupChunks,
    close,
    handlePointerDownOutside,
    pointerdown_handler,
    div2_binding
  ];
}
var Popup = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance4, create_fragment4, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Popup",
      options,
      id: create_fragment4.name
    });
  }
};
var Popup_default = Popup;

// node_modules/@event-calendar/day-grid/src/Day.svelte
var file5 = "node_modules\\@event-calendar\\day-grid\\src\\Day.svelte";
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[40] = list[i];
  child_ctx[41] = list;
  child_ctx[42] = i;
  return child_ctx;
}
function create_if_block_3(ctx) {
  let div;
  let event;
  let div_class_value;
  let current;
  event = new Event_default({
    props: { chunk: (
      /*iChunks*/
      ctx[2][1]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      div = element("div");
      create_component(event.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(event.$$.fragment, div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", div_class_value = /*$theme*/
      ctx[12].events);
      add_location(div, file5, 116, 8, 3807);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      mount_component(event, div, null);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const event_changes = {};
      if (dirty[0] & /*iChunks*/
      4)
        event_changes.chunk = /*iChunks*/
        ctx2[2][1];
      event.$set(event_changes);
      if (!current || dirty[0] & /*$theme*/
      4096 && div_class_value !== (div_class_value = /*$theme*/
      ctx2[12].events)) {
        attr_dev(div, "class", div_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      destroy_component(event);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_3.name,
    type: "if",
    source: "(116:4) {#if iChunks[1] && datesEqual(iChunks[1].date, date)}",
    ctx
  });
  return block;
}
function create_if_block_2(ctx) {
  let div;
  let event;
  let div_class_value;
  let current;
  event = new Event_default({
    props: { chunk: (
      /*iChunks*/
      ctx[2][0]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      div = element("div");
      create_component(event.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      claim_component(event.$$.fragment, div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", div_class_value = /*$theme*/
      ctx[12].events + " " + /*$theme*/
      ctx[12].preview);
      add_location(div, file5, 122, 8, 3995);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      mount_component(event, div, null);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const event_changes = {};
      if (dirty[0] & /*iChunks*/
      4)
        event_changes.chunk = /*iChunks*/
        ctx2[2][0];
      event.$set(event_changes);
      if (!current || dirty[0] & /*$theme*/
      4096 && div_class_value !== (div_class_value = /*$theme*/
      ctx2[12].events + " " + /*$theme*/
      ctx2[12].preview)) {
        attr_dev(div, "class", div_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      destroy_component(event);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(122:4) {#if iChunks[0] && datesEqual(iChunks[0].date, date)}",
    ctx
  });
  return block;
}
function create_each_block3(key_1, ctx) {
  let first;
  let event;
  let i = (
    /*i*/
    ctx[42]
  );
  let current;
  const assign_event = () => (
    /*event_binding*/
    ctx[32](event, i)
  );
  const unassign_event = () => (
    /*event_binding*/
    ctx[32](null, i)
  );
  let event_props = {
    chunk: (
      /*chunk*/
      ctx[40]
    ),
    longChunks: (
      /*longChunks*/
      ctx[1]
    )
  };
  event = new Event_default({ props: event_props, $$inline: true });
  assign_event();
  const block = {
    key: key_1,
    first: null,
    c: function create() {
      first = empty();
      create_component(event.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      first = empty();
      claim_component(event.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      this.first = first;
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, first, anchor);
      mount_component(event, target, anchor);
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (i !== /*i*/
      ctx[42]) {
        unassign_event();
        i = /*i*/
        ctx[42];
        assign_event();
      }
      const event_changes = {};
      if (dirty[0] & /*dayChunks*/
      16)
        event_changes.chunk = /*chunk*/
        ctx[40];
      if (dirty[0] & /*longChunks*/
      2)
        event_changes.longChunks = /*longChunks*/
        ctx[1];
      event.$set(event_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(event.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(event.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(first);
      unassign_event();
      destroy_component(event, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block3.name,
    type: "each",
    source: "(128:8) {#each dayChunks as chunk, i (chunk.event)}",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let popup;
  let current;
  popup = new Popup_default({ $$inline: true });
  const block = {
    c: function create() {
      create_component(popup.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(popup.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(popup, target, anchor);
      current = true;
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(popup.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(popup.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(popup, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(132:4) {#if showPopup}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let a;
  let setContent_action;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      a = element("a");
      this.h();
    },
    l: function claim(nodes) {
      a = claim_element(nodes, "A", {});
      children(a).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(a, file5, 136, 12, 4408);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, a, anchor);
      if (!mounted) {
        dispose = [
          listen_dev(a, "click", stop_propagation(
            /*showMore*/
            ctx[23]
          ), false, false, true, false),
          listen_dev(a, "pointerdown", stop_propagation(
            /*pointerdown_handler*/
            ctx[31]
          ), false, false, true, false),
          action_destroyer(setContent_action = setContent.call(
            null,
            a,
            /*moreLink*/
            ctx[6]
          ))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (setContent_action && is_function(setContent_action.update) && dirty[0] & /*moreLink*/
      64)
        setContent_action.update.call(
          null,
          /*moreLink*/
          ctx2[6]
        );
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(a);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(136:8) {#if hiddenEvents.size}",
    ctx
  });
  return block;
}
function create_fragment5(ctx) {
  let div3;
  let div0;
  let t0_value = (
    /*date*/
    ctx[0].getUTCDate() + ""
  );
  let t0;
  let div0_class_value;
  let t1;
  let show_if_1 = (
    /*iChunks*/
    ctx[2][1] && datesEqual(
      /*iChunks*/
      ctx[2][1].date,
      /*date*/
      ctx[0]
    )
  );
  let t2;
  let show_if = (
    /*iChunks*/
    ctx[2][0] && datesEqual(
      /*iChunks*/
      ctx[2][0].date,
      /*date*/
      ctx[0]
    )
  );
  let t3;
  let div1;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let div1_class_value;
  let t4;
  let t5;
  let div2;
  let div2_class_value;
  let div3_class_value;
  let current;
  let mounted;
  let dispose;
  let if_block0 = show_if_1 && create_if_block_3(ctx);
  let if_block1 = show_if && create_if_block_2(ctx);
  let each_value = (
    /*dayChunks*/
    ctx[4]
  );
  validate_each_argument(each_value);
  const get_key = (ctx2) => (
    /*chunk*/
    ctx2[40].event
  );
  validate_each_keys(ctx, each_value, get_each_context3, get_key);
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context3(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block3(key, child_ctx));
  }
  let if_block2 = (
    /*showPopup*/
    ctx[7] && create_if_block_1(ctx)
  );
  let if_block3 = (
    /*hiddenEvents*/
    ctx[5].size && create_if_block(ctx)
  );
  const block = {
    c: function create() {
      div3 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      div1 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t4 = space();
      if (if_block2)
        if_block2.c();
      t5 = space();
      div2 = element("div");
      if (if_block3)
        if_block3.c();
      this.h();
    },
    l: function claim(nodes) {
      div3 = claim_element(nodes, "DIV", { class: true });
      var div3_nodes = children(div3);
      div0 = claim_element(div3_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      t0 = claim_text(div0_nodes, t0_value);
      div0_nodes.forEach(detach_dev);
      t1 = claim_space(div3_nodes);
      if (if_block0)
        if_block0.l(div3_nodes);
      t2 = claim_space(div3_nodes);
      if (if_block1)
        if_block1.l(div3_nodes);
      t3 = claim_space(div3_nodes);
      div1 = claim_element(div3_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(div1_nodes);
      }
      div1_nodes.forEach(detach_dev);
      t4 = claim_space(div3_nodes);
      if (if_block2)
        if_block2.l(div3_nodes);
      t5 = claim_space(div3_nodes);
      div2 = claim_element(div3_nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      if (if_block3)
        if_block3.l(div2_nodes);
      div2_nodes.forEach(detach_dev);
      div3_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div0, "class", div0_class_value = /*$theme*/
      ctx[12].dayHead);
      add_location(div0, file5, 113, 4, 3664);
      attr_dev(div1, "class", div1_class_value = /*$theme*/
      ctx[12].events);
      add_location(div1, file5, 126, 4, 4111);
      attr_dev(div2, "class", div2_class_value = /*$theme*/
      ctx[12].dayFoot);
      add_location(div2, file5, 134, 4, 4333);
      attr_dev(div3, "class", div3_class_value = /*$theme*/
      ctx[12].day + /*isToday*/
      (ctx[8] ? " " + /*$theme*/
      ctx[12].today : "") + /*otherMonth*/
      (ctx[9] ? " " + /*$theme*/
      ctx[12].otherMonth : "") + /*highlight*/
      (ctx[10] ? " " + /*$theme*/
      ctx[12].highlight : ""));
      add_location(div3, file5, 106, 0, 3326);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div3, anchor);
      append_hydration_dev(div3, div0);
      append_hydration_dev(div0, t0);
      append_hydration_dev(div3, t1);
      if (if_block0)
        if_block0.m(div3, null);
      append_hydration_dev(div3, t2);
      if (if_block1)
        if_block1.m(div3, null);
      append_hydration_dev(div3, t3);
      append_hydration_dev(div3, div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
      append_hydration_dev(div3, t4);
      if (if_block2)
        if_block2.m(div3, null);
      append_hydration_dev(div3, t5);
      append_hydration_dev(div3, div2);
      if (if_block3)
        if_block3.m(div2, null);
      ctx[33](div3);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            window,
            "resize",
            /*reposition*/
            ctx[24],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div3,
            "pointerenter",
            function() {
              if (is_function(
                /*createPointerEnterHandler*/
                ctx[22](
                  /*$_interaction*/
                  ctx[13]
                )
              ))
                ctx[22](
                  /*$_interaction*/
                  ctx[13]
                ).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div3,
            "pointerleave",
            function() {
              var _a, _b;
              if (is_function(
                /*$_interaction*/
                (_a = ctx[13].pointer) == null ? void 0 : _a.leave
              ))
                (_b = ctx[13].pointer) == null ? void 0 : _b.leave.apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div3,
            "pointerdown",
            function() {
              var _a, _b;
              if (is_function(
                /*$_interaction*/
                (_a = ctx[13].action) == null ? void 0 : _a.select
              ))
                (_b = ctx[13].action) == null ? void 0 : _b.select.apply(this, arguments);
            },
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if ((!current || dirty[0] & /*date*/
      1) && t0_value !== (t0_value = /*date*/
      ctx[0].getUTCDate() + ""))
        set_data_dev(t0, t0_value);
      if (!current || dirty[0] & /*$theme*/
      4096 && div0_class_value !== (div0_class_value = /*$theme*/
      ctx[12].dayHead)) {
        attr_dev(div0, "class", div0_class_value);
      }
      if (dirty[0] & /*iChunks, date*/
      5)
        show_if_1 = /*iChunks*/
        ctx[2][1] && datesEqual(
          /*iChunks*/
          ctx[2][1].date,
          /*date*/
          ctx[0]
        );
      if (show_if_1) {
        if (if_block0) {
          if_block0.p(ctx, dirty);
          if (dirty[0] & /*iChunks, date*/
          5) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_3(ctx);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div3, t2);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (dirty[0] & /*iChunks, date*/
      5)
        show_if = /*iChunks*/
        ctx[2][0] && datesEqual(
          /*iChunks*/
          ctx[2][0].date,
          /*date*/
          ctx[0]
        );
      if (show_if) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
          if (dirty[0] & /*iChunks, date*/
          5) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_2(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div3, t3);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
      if (dirty[0] & /*dayChunks, longChunks, refs*/
      2066) {
        each_value = /*dayChunks*/
        ctx[4];
        validate_each_argument(each_value);
        group_outros();
        validate_each_keys(ctx, each_value, get_each_context3, get_key);
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, outro_and_destroy_block, create_each_block3, null, get_each_context3);
        check_outros();
      }
      if (!current || dirty[0] & /*$theme*/
      4096 && div1_class_value !== (div1_class_value = /*$theme*/
      ctx[12].events)) {
        attr_dev(div1, "class", div1_class_value);
      }
      if (
        /*showPopup*/
        ctx[7]
      ) {
        if (if_block2) {
          if (dirty[0] & /*showPopup*/
          128) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block_1(ctx);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div3, t5);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (
        /*hiddenEvents*/
        ctx[5].size
      ) {
        if (if_block3) {
          if_block3.p(ctx, dirty);
        } else {
          if_block3 = create_if_block(ctx);
          if_block3.c();
          if_block3.m(div2, null);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
      if (!current || dirty[0] & /*$theme*/
      4096 && div2_class_value !== (div2_class_value = /*$theme*/
      ctx[12].dayFoot)) {
        attr_dev(div2, "class", div2_class_value);
      }
      if (!current || dirty[0] & /*$theme, isToday, otherMonth, highlight*/
      5888 && div3_class_value !== (div3_class_value = /*$theme*/
      ctx[12].day + /*isToday*/
      (ctx[8] ? " " + /*$theme*/
      ctx[12].today : "") + /*otherMonth*/
      (ctx[9] ? " " + /*$theme*/
      ctx[12].otherMonth : "") + /*highlight*/
      (ctx[10] ? " " + /*$theme*/
      ctx[12].highlight : ""))) {
        attr_dev(div3, "class", div3_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(if_block2);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(if_block2);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div3);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      ctx[33](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment5.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance5($$self, $$props, $$invalidate) {
  let $_hiddenEvents;
  let $_popupChunks;
  let $_popupDate;
  let $moreLinkContent;
  let $highlightedDates;
  let $currentDate;
  let $theme;
  let $_interaction;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Day", slots, []);
  let { date } = $$props;
  let { chunks } = $$props;
  let { longChunks } = $$props;
  let { iChunks = [] } = $$props;
  let { date: currentDate, dayMaxEvents, highlightedDates, moreLinkContent, theme, _hiddenEvents, _popupDate, _popupChunks, _interaction, _queue } = getContext("state");
  validate_store(currentDate, "currentDate");
  component_subscribe($$self, currentDate, (value) => $$invalidate(30, $currentDate = value));
  validate_store(highlightedDates, "highlightedDates");
  component_subscribe($$self, highlightedDates, (value) => $$invalidate(29, $highlightedDates = value));
  validate_store(moreLinkContent, "moreLinkContent");
  component_subscribe($$self, moreLinkContent, (value) => $$invalidate(28, $moreLinkContent = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(12, $theme = value));
  validate_store(_hiddenEvents, "_hiddenEvents");
  component_subscribe($$self, _hiddenEvents, (value) => $$invalidate(26, $_hiddenEvents = value));
  validate_store(_popupDate, "_popupDate");
  component_subscribe($$self, _popupDate, (value) => $$invalidate(27, $_popupDate = value));
  validate_store(_popupChunks, "_popupChunks");
  component_subscribe($$self, _popupChunks, (value) => $$invalidate(34, $_popupChunks = value));
  validate_store(_interaction, "_interaction");
  component_subscribe($$self, _interaction, (value) => $$invalidate(13, $_interaction = value));
  let el;
  let dayChunks;
  let today = setMidnight(createDate());
  let isToday;
  let otherMonth;
  let highlight;
  let hiddenEvents = /* @__PURE__ */ new Set();
  let moreLink = "";
  let showPopup;
  let refs = [];
  function createPointerEnterHandler(interaction) {
    return interaction.pointer ? (jsEvent) => interaction.pointer.enterDayGrid(date, jsEvent) : void 0;
  }
  function showMore() {
    set_store_value(_popupDate, $_popupDate = date, $_popupDate);
  }
  function setPopupChunks() {
    var _a;
    let nextDay = addDay(cloneDate(date));
    let chunks2 = dayChunks.concat(((_a = longChunks[date.getTime()]) == null ? void 0 : _a.chunks) || []);
    set_store_value(_popupChunks, $_popupChunks = chunks2.map((chunk) => assign({}, chunk, createEventChunk(chunk.event, date, nextDay), { days: 1, dates: [date] })).sort((a, b) => a.top - b.top), $_popupChunks);
  }
  function reposition() {
    var _a;
    $$invalidate(11, refs.length = dayChunks.length, refs);
    for (let ref of refs) {
      (_a = ref == null ? void 0 : ref.reposition) == null ? void 0 : _a.call(ref);
    }
  }
  afterUpdate(reposition);
  let debounceHandle = {};
  $$self.$$.on_mount.push(function() {
    if (date === void 0 && !("date" in $$props || $$self.$$.bound[$$self.$$.props["date"]])) {
      console.warn("<Day> was created without expected prop 'date'");
    }
    if (chunks === void 0 && !("chunks" in $$props || $$self.$$.bound[$$self.$$.props["chunks"]])) {
      console.warn("<Day> was created without expected prop 'chunks'");
    }
    if (longChunks === void 0 && !("longChunks" in $$props || $$self.$$.bound[$$self.$$.props["longChunks"]])) {
      console.warn("<Day> was created without expected prop 'longChunks'");
    }
  });
  const writable_props = ["date", "chunks", "longChunks", "iChunks"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Day> was created with unknown prop '${key}'`);
  });
  function pointerdown_handler(event) {
    bubble.call(this, $$self, event);
  }
  function event_binding($$value, i) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      refs[i] = $$value;
      $$invalidate(11, refs);
    });
  }
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      el = $$value;
      $$invalidate(3, el);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("date" in $$props2)
      $$invalidate(0, date = $$props2.date);
    if ("chunks" in $$props2)
      $$invalidate(25, chunks = $$props2.chunks);
    if ("longChunks" in $$props2)
      $$invalidate(1, longChunks = $$props2.longChunks);
    if ("iChunks" in $$props2)
      $$invalidate(2, iChunks = $$props2.iChunks);
  };
  $$self.$capture_state = () => ({
    getContext,
    tick,
    afterUpdate,
    is_function,
    createDate,
    setMidnight,
    datesEqual,
    setContent,
    createEventChunk,
    addDay,
    cloneDate,
    assign,
    setPayload,
    debounce,
    Event: Event_default,
    Popup: Popup_default,
    date,
    chunks,
    longChunks,
    iChunks,
    currentDate,
    dayMaxEvents,
    highlightedDates,
    moreLinkContent,
    theme,
    _hiddenEvents,
    _popupDate,
    _popupChunks,
    _interaction,
    _queue,
    el,
    dayChunks,
    today,
    isToday,
    otherMonth,
    highlight,
    hiddenEvents,
    moreLink,
    showPopup,
    refs,
    createPointerEnterHandler,
    showMore,
    setPopupChunks,
    reposition,
    debounceHandle,
    $_hiddenEvents,
    $_popupChunks,
    $_popupDate,
    $moreLinkContent,
    $highlightedDates,
    $currentDate,
    $theme,
    $_interaction
  });
  $$self.$inject_state = ($$props2) => {
    if ("date" in $$props2)
      $$invalidate(0, date = $$props2.date);
    if ("chunks" in $$props2)
      $$invalidate(25, chunks = $$props2.chunks);
    if ("longChunks" in $$props2)
      $$invalidate(1, longChunks = $$props2.longChunks);
    if ("iChunks" in $$props2)
      $$invalidate(2, iChunks = $$props2.iChunks);
    if ("currentDate" in $$props2)
      $$invalidate(14, currentDate = $$props2.currentDate);
    if ("dayMaxEvents" in $$props2)
      dayMaxEvents = $$props2.dayMaxEvents;
    if ("highlightedDates" in $$props2)
      $$invalidate(15, highlightedDates = $$props2.highlightedDates);
    if ("moreLinkContent" in $$props2)
      $$invalidate(16, moreLinkContent = $$props2.moreLinkContent);
    if ("theme" in $$props2)
      $$invalidate(17, theme = $$props2.theme);
    if ("_hiddenEvents" in $$props2)
      $$invalidate(18, _hiddenEvents = $$props2._hiddenEvents);
    if ("_popupDate" in $$props2)
      $$invalidate(19, _popupDate = $$props2._popupDate);
    if ("_popupChunks" in $$props2)
      $$invalidate(20, _popupChunks = $$props2._popupChunks);
    if ("_interaction" in $$props2)
      $$invalidate(21, _interaction = $$props2._interaction);
    if ("_queue" in $$props2)
      $$invalidate(36, _queue = $$props2._queue);
    if ("el" in $$props2)
      $$invalidate(3, el = $$props2.el);
    if ("dayChunks" in $$props2)
      $$invalidate(4, dayChunks = $$props2.dayChunks);
    if ("today" in $$props2)
      $$invalidate(37, today = $$props2.today);
    if ("isToday" in $$props2)
      $$invalidate(8, isToday = $$props2.isToday);
    if ("otherMonth" in $$props2)
      $$invalidate(9, otherMonth = $$props2.otherMonth);
    if ("highlight" in $$props2)
      $$invalidate(10, highlight = $$props2.highlight);
    if ("hiddenEvents" in $$props2)
      $$invalidate(5, hiddenEvents = $$props2.hiddenEvents);
    if ("moreLink" in $$props2)
      $$invalidate(6, moreLink = $$props2.moreLink);
    if ("showPopup" in $$props2)
      $$invalidate(7, showPopup = $$props2.showPopup);
    if ("refs" in $$props2)
      $$invalidate(11, refs = $$props2.refs);
    if ("debounceHandle" in $$props2)
      $$invalidate(39, debounceHandle = $$props2.debounceHandle);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*hiddenEvents, chunks, date, dayChunks*/
    33554481) {
      $: {
        $$invalidate(4, dayChunks = []);
        hiddenEvents.clear();
        $$invalidate(5, hiddenEvents), $$invalidate(25, chunks), $$invalidate(0, date), $$invalidate(4, dayChunks);
        for (let chunk of chunks) {
          if (datesEqual(chunk.date, date)) {
            dayChunks.push(chunk);
          }
        }
      }
    }
    if ($$self.$$.dirty[0] & /*date, hiddenEvents*/
    33) {
      $:
        set_store_value(_hiddenEvents, $_hiddenEvents[date.getTime()] = hiddenEvents, $_hiddenEvents);
    }
    if ($$self.$$.dirty[0] & /*date, $currentDate, $highlightedDates*/
    1610612737) {
      $: {
        $$invalidate(8, isToday = datesEqual(date, today));
        $$invalidate(9, otherMonth = date.getUTCMonth() !== $currentDate.getUTCMonth());
        $$invalidate(10, highlight = $highlightedDates.some((d) => datesEqual(d, date)));
      }
    }
    if ($$self.$$.dirty[0] & /*$_hiddenEvents, hiddenEvents, $moreLinkContent, moreLink*/
    335544416) {
      $:
        if ($_hiddenEvents && hiddenEvents.size) {
          let text2 = "+" + hiddenEvents.size + " more";
          if ($moreLinkContent) {
            $$invalidate(6, moreLink = is_function($moreLinkContent) ? $moreLinkContent({ num: hiddenEvents.size, text: text2 }) : $moreLinkContent);
            if (typeof moreLink === "string") {
              $$invalidate(6, moreLink = { html: moreLink });
            }
          } else {
            $$invalidate(6, moreLink = { html: text2 });
          }
        }
    }
    if ($$self.$$.dirty[0] & /*$_popupDate, date*/
    134217729) {
      $:
        $$invalidate(7, showPopup = $_popupDate && datesEqual(date, $_popupDate));
    }
    if ($$self.$$.dirty[0] & /*showPopup, longChunks, dayChunks*/
    146) {
      $:
        if (showPopup && longChunks && dayChunks) {
          tick().then(setPopupChunks);
        }
    }
    if ($$self.$$.dirty[0] & /*el, date*/
    9) {
      $:
        if (el) {
          setPayload(el, () => ({
            allDay: true,
            date,
            resource: void 0,
            dayEl: el
          }));
        }
    }
    if ($$self.$$.dirty[0] & /*$_hiddenEvents*/
    67108864) {
      $:
        if ($_hiddenEvents) {
          debounce(reposition, debounceHandle, _queue);
        }
    }
  };
  return [
    date,
    longChunks,
    iChunks,
    el,
    dayChunks,
    hiddenEvents,
    moreLink,
    showPopup,
    isToday,
    otherMonth,
    highlight,
    refs,
    $theme,
    $_interaction,
    currentDate,
    highlightedDates,
    moreLinkContent,
    theme,
    _hiddenEvents,
    _popupDate,
    _popupChunks,
    _interaction,
    createPointerEnterHandler,
    showMore,
    reposition,
    chunks,
    $_hiddenEvents,
    $_popupDate,
    $moreLinkContent,
    $highlightedDates,
    $currentDate,
    pointerdown_handler,
    event_binding,
    div3_binding
  ];
}
var Day = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance5,
      create_fragment5,
      safe_not_equal,
      {
        date: 0,
        chunks: 25,
        longChunks: 1,
        iChunks: 2
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Day",
      options,
      id: create_fragment5.name
    });
  }
  get date() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set date(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get chunks() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set chunks(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get longChunks() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set longChunks(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get iChunks() {
    throw new Error("<Day>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set iChunks(value) {
    throw new Error("<Day>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Day_default = Day;

// node_modules/@event-calendar/day-grid/src/Week.svelte
var file6 = "node_modules\\@event-calendar\\day-grid\\src\\Week.svelte";
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i];
  return child_ctx;
}
function create_each_block4(ctx) {
  let day;
  let current;
  day = new Day_default({
    props: {
      date: (
        /*date*/
        ctx[14]
      ),
      chunks: (
        /*chunks*/
        ctx[1]
      ),
      longChunks: (
        /*longChunks*/
        ctx[2]
      ),
      iChunks: (
        /*iChunks*/
        ctx[3]
      )
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(day.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(day.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(day, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const day_changes = {};
      if (dirty & /*dates*/
      1)
        day_changes.date = /*date*/
        ctx2[14];
      if (dirty & /*chunks*/
      2)
        day_changes.chunks = /*chunks*/
        ctx2[1];
      if (dirty & /*longChunks*/
      4)
        day_changes.longChunks = /*longChunks*/
        ctx2[2];
      if (dirty & /*iChunks*/
      8)
        day_changes.iChunks = /*iChunks*/
        ctx2[3];
      day.$set(day_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(day.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(day.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(day, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block4.name,
    type: "each",
    source: "(44:4) {#each dates as date}",
    ctx
  });
  return block;
}
function create_fragment6(ctx) {
  let div;
  let div_class_value;
  let current;
  let each_value = (
    /*dates*/
    ctx[0]
  );
  validate_each_argument(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  const block = {
    c: function create() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(div_nodes);
      }
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", div_class_value = /*$theme*/
      ctx[4].days);
      add_location(div, file6, 42, 0, 1143);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*dates, chunks, longChunks, iChunks*/
      15) {
        each_value = /*dates*/
        ctx2[0];
        validate_each_argument(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block4(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (!current || dirty & /*$theme*/
      16 && div_class_value !== (div_class_value = /*$theme*/
      ctx2[4].days)) {
        attr_dev(div, "class", div_class_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment6.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance6($$self, $$props, $$invalidate) {
  let $hiddenDays;
  let $_iEvents;
  let $_events;
  let $theme;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Week", slots, []);
  let { dates } = $$props;
  let { _events, _iEvents, hiddenDays, theme } = getContext("state");
  validate_store(_events, "_events");
  component_subscribe($$self, _events, (value) => $$invalidate(13, $_events = value));
  validate_store(_iEvents, "_iEvents");
  component_subscribe($$self, _iEvents, (value) => $$invalidate(12, $_iEvents = value));
  validate_store(hiddenDays, "hiddenDays");
  component_subscribe($$self, hiddenDays, (value) => $$invalidate(11, $hiddenDays = value));
  validate_store(theme, "theme");
  component_subscribe($$self, theme, (value) => $$invalidate(4, $theme = value));
  let chunks, longChunks, iChunks = [];
  let start;
  let end;
  $$self.$$.on_mount.push(function() {
    if (dates === void 0 && !("dates" in $$props || $$self.$$.bound[$$self.$$.props["dates"]])) {
      console.warn("<Week> was created without expected prop 'dates'");
    }
  });
  const writable_props = ["dates"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Week> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("dates" in $$props2)
      $$invalidate(0, dates = $$props2.dates);
  };
  $$self.$capture_state = () => ({
    getContext,
    cloneDate,
    addDay,
    eventIntersects,
    bgEvent,
    createEventChunk,
    prepareEventChunks,
    Day: Day_default,
    dates,
    _events,
    _iEvents,
    hiddenDays,
    theme,
    chunks,
    longChunks,
    iChunks,
    start,
    end,
    $hiddenDays,
    $_iEvents,
    $_events,
    $theme
  });
  $$self.$inject_state = ($$props2) => {
    if ("dates" in $$props2)
      $$invalidate(0, dates = $$props2.dates);
    if ("_events" in $$props2)
      $$invalidate(5, _events = $$props2._events);
    if ("_iEvents" in $$props2)
      $$invalidate(6, _iEvents = $$props2._iEvents);
    if ("hiddenDays" in $$props2)
      $$invalidate(7, hiddenDays = $$props2.hiddenDays);
    if ("theme" in $$props2)
      $$invalidate(8, theme = $$props2.theme);
    if ("chunks" in $$props2)
      $$invalidate(1, chunks = $$props2.chunks);
    if ("longChunks" in $$props2)
      $$invalidate(2, longChunks = $$props2.longChunks);
    if ("iChunks" in $$props2)
      $$invalidate(3, iChunks = $$props2.iChunks);
    if ("start" in $$props2)
      $$invalidate(9, start = $$props2.start);
    if ("end" in $$props2)
      $$invalidate(10, end = $$props2.end);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*dates*/
    1) {
      $: {
        $$invalidate(9, start = dates[0]);
        $$invalidate(10, end = addDay(cloneDate(dates[dates.length - 1])));
      }
    }
    if ($$self.$$.dirty & /*$_events, start, end, chunks, $hiddenDays*/
    11778) {
      $: {
        $$invalidate(1, chunks = []);
        for (let event of $_events) {
          if (!bgEvent(event.display) && eventIntersects(event, start, end)) {
            let chunk = createEventChunk(event, start, end);
            chunks.push(chunk);
          }
        }
        $$invalidate(2, longChunks = prepareEventChunks(chunks, $hiddenDays));
      }
    }
    if ($$self.$$.dirty & /*$_iEvents, start, end, $hiddenDays*/
    7680) {
      $:
        $$invalidate(3, iChunks = $_iEvents.map((event) => {
          let chunk;
          if (event && eventIntersects(event, start, end)) {
            chunk = createEventChunk(event, start, end);
            prepareEventChunks([chunk], $hiddenDays);
          } else {
            chunk = null;
          }
          return chunk;
        }));
    }
  };
  return [
    dates,
    chunks,
    longChunks,
    iChunks,
    $theme,
    _events,
    _iEvents,
    hiddenDays,
    theme,
    start,
    end,
    $hiddenDays,
    $_iEvents,
    $_events
  ];
}
var Week = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance6, create_fragment6, safe_not_equal, { dates: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Week",
      options,
      id: create_fragment6.name
    });
  }
  get dates() {
    throw new Error("<Week>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set dates(value) {
    throw new Error("<Week>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Week_default = Week;

// node_modules/@event-calendar/day-grid/src/View.svelte
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i];
  return child_ctx;
}
function create_each_block5(ctx) {
  let week;
  let current;
  week = new Week_default({
    props: { dates: (
      /*dates*/
      ctx[13]
    ) },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(week.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(week.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(week, target, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const week_changes = {};
      if (dirty & /*weeks*/
      1)
        week_changes.dates = /*dates*/
        ctx2[13];
      week.$set(week_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(week.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(week.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(week, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block5.name,
    type: "each",
    source: "(31:0) {#each weeks as dates}",
    ctx
  });
  return block;
}
function create_default_slot(ctx) {
  let each_1_anchor;
  let current;
  let each_value = (
    /*weeks*/
    ctx[0]
  );
  validate_each_argument(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  const block = {
    c: function create() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    l: function claim(nodes) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(nodes);
      }
      each_1_anchor = empty();
    },
    m: function mount(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(target, anchor);
        }
      }
      insert_hydration_dev(target, each_1_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (dirty & /*weeks*/
      1) {
        each_value = /*weeks*/
        ctx2[0];
        validate_each_argument(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach_dev(each_1_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(30:0) <Body>",
    ctx
  });
  return block;
}
function create_fragment7(ctx) {
  let header;
  let t;
  let body;
  let current;
  header = new Header_default({ $$inline: true });
  body = new Body_default({
    props: {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(header.$$.fragment);
      t = space();
      create_component(body.$$.fragment);
    },
    l: function claim(nodes) {
      claim_component(header.$$.fragment, nodes);
      t = claim_space(nodes);
      claim_component(body.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      mount_component(header, target, anchor);
      insert_hydration_dev(target, t, anchor);
      mount_component(body, target, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      const body_changes = {};
      if (dirty & /*$$scope, weeks*/
      65537) {
        body_changes.$$scope = { dirty, ctx: ctx2 };
      }
      body.$set(body_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(header.$$.fragment, local);
      transition_in(body.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(header.$$.fragment, local);
      transition_out(body.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      destroy_component(header, detaching);
      if (detaching)
        detach_dev(t);
      destroy_component(body, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment7.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance7($$self, $$props, $$invalidate) {
  let $_viewDates;
  let $dayMaxEvents;
  let $_hiddenEvents;
  let $hiddenDays;
  let $_viewClass;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("View", slots, []);
  let { _viewDates, _viewClass, _hiddenEvents, dayMaxEvents, hiddenDays, theme } = getContext("state");
  validate_store(_viewDates, "_viewDates");
  component_subscribe($$self, _viewDates, (value) => $$invalidate(7, $_viewDates = value));
  validate_store(_viewClass, "_viewClass");
  component_subscribe($$self, _viewClass, (value) => $$invalidate(11, $_viewClass = value));
  validate_store(_hiddenEvents, "_hiddenEvents");
  component_subscribe($$self, _hiddenEvents, (value) => $$invalidate(10, $_hiddenEvents = value));
  validate_store(dayMaxEvents, "dayMaxEvents");
  component_subscribe($$self, dayMaxEvents, (value) => $$invalidate(8, $dayMaxEvents = value));
  validate_store(hiddenDays, "hiddenDays");
  component_subscribe($$self, hiddenDays, (value) => $$invalidate(9, $hiddenDays = value));
  set_store_value(_viewClass, $_viewClass = "month", $_viewClass);
  let weeks;
  let days2;
  const writable_props = [];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<View> was created with unknown prop '${key}'`);
  });
  $$self.$capture_state = () => ({
    getContext,
    Header: Header_default,
    Body: Body_default,
    Week: Week_default,
    _viewDates,
    _viewClass,
    _hiddenEvents,
    dayMaxEvents,
    hiddenDays,
    theme,
    weeks,
    days: days2,
    $_viewDates,
    $dayMaxEvents,
    $_hiddenEvents,
    $hiddenDays,
    $_viewClass
  });
  $$self.$inject_state = ($$props2) => {
    if ("_viewDates" in $$props2)
      $$invalidate(1, _viewDates = $$props2._viewDates);
    if ("_viewClass" in $$props2)
      $$invalidate(2, _viewClass = $$props2._viewClass);
    if ("_hiddenEvents" in $$props2)
      $$invalidate(3, _hiddenEvents = $$props2._hiddenEvents);
    if ("dayMaxEvents" in $$props2)
      $$invalidate(4, dayMaxEvents = $$props2.dayMaxEvents);
    if ("hiddenDays" in $$props2)
      $$invalidate(5, hiddenDays = $$props2.hiddenDays);
    if ("theme" in $$props2)
      theme = $$props2.theme;
    if ("weeks" in $$props2)
      $$invalidate(0, weeks = $$props2.weeks);
    if ("days" in $$props2)
      $$invalidate(6, days2 = $$props2.days);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$hiddenDays, $dayMaxEvents, $_viewDates, days, weeks*/
    961) {
      $: {
        $$invalidate(0, weeks = []);
        $$invalidate(6, days2 = 7 - $hiddenDays.length);
        set_store_value(_hiddenEvents, $_hiddenEvents = {}, $_hiddenEvents);
        $dayMaxEvents;
        for (let i = 0; i < $_viewDates.length / days2; ++i) {
          let dates = [];
          for (let j = 0; j < days2; ++j) {
            dates.push($_viewDates[i * days2 + j]);
          }
          weeks.push(dates);
        }
      }
    }
  };
  return [
    weeks,
    _viewDates,
    _viewClass,
    _hiddenEvents,
    dayMaxEvents,
    hiddenDays,
    days2,
    $_viewDates,
    $dayMaxEvents,
    $hiddenDays
  ];
}
var View = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance7, create_fragment7, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "View",
      options,
      id: create_fragment7.name
    });
  }
};
var View_default = View;

// node_modules/@event-calendar/day-grid/src/index.js
var src_default = {
  createOptions(options) {
    options.dayMaxEvents = false;
    options.dayPopoverFormat = { month: "long", day: "numeric", year: "numeric" };
    options.moreLinkContent = void 0;
    options.buttonText.dayGridMonth = "month";
    options.theme.uniform = "ec-uniform";
    options.theme.dayFoot = "ec-day-foot";
    options.theme.month = "ec-month";
    options.theme.popup = "ec-popup";
    options.view = "dayGridMonth";
    options.views.dayGridMonth = {
      component: View_default,
      dayHeaderFormat: { weekday: "short" },
      displayEventEnd: false,
      duration: { months: 1 },
      titleFormat: { year: "numeric", month: "long" }
    };
  },
  createStores(state) {
    state._days = days(state);
    state._intlDayPopover = intl(state.locale, state.dayPopoverFormat);
    state._hiddenEvents = writable({});
    state._popupDate = writable(null);
    state._popupChunks = writable([]);
  }
};
export {
  src_default as default
};
//# sourceMappingURL=@event-calendar_day-grid.js.map
