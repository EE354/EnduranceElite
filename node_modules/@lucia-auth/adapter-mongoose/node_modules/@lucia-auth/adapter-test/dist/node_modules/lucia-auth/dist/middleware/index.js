export const node = () => {
	return (incomingMessage, outgoingMessage, env) => {
		const getUrl = () => {
			if (!incomingMessage.headers.host) return "";
			const protocol = env === "DEV" ? "http:" : "https:";
			const host = incomingMessage.headers.host;
			const pathname = incomingMessage.url ?? "";
			return `${protocol}//${host}${pathname}`;
		};
		const requestContext = {
			request: {
				url: getUrl(),
				method: incomingMessage.method ?? "",
				headers: {
					origin: incomingMessage.headers.origin ?? null,
					cookie: incomingMessage.headers.cookie ?? null
				}
			},
			setCookie: (cookie) => {
				const setCookieHeaderValues =
					outgoingMessage
						.getHeader("Set-Cookie")
						?.toString()
						.split(",")
						.filter((val) => val) ?? [];
				outgoingMessage.setHeader("Set-Cookie", [
					cookie.serialize(),
					...setCookieHeaderValues
				]);
			}
		};
		return requestContext;
	};
};
export const express = () => {
	return (request, response) => {
		const requestContext = {
			request: {
				url: request.url,
				method: request.method,
				headers: {
					origin: request.headers.origin ?? null,
					cookie: request.headers.cookie ?? null
				}
			},
			setCookie: (cookie) => {
				response.cookie(cookie.name, cookie.value, cookie.attributes);
			}
		};
		return requestContext;
	};
};
export const sveltekit = () => {
	return (event) => {
		const requestContext = {
			request: {
				url: event.request.url,
				method: event.request.method,
				headers: {
					origin: event.request.headers.get("Origin") ?? null,
					cookie: event.request.headers.get("Cookie") ?? null
				}
			},
			setCookie: (cookie) => {
				event.cookies.set(cookie.name, cookie.value, cookie.attributes);
			}
		};
		return requestContext;
	};
};
export const astro = () => {
	return (context) => {
		const requestContext = {
			request: {
				url: context.request.url,
				method: context.request.method,
				headers: {
					origin: context.request.headers.get("Origin") ?? null,
					cookie: context.request.headers.get("Cookie") ?? null
				}
			},
			setCookie: (cookie) => {
				context.cookies.set(cookie.name, cookie.value, cookie.attributes);
			}
		};
		return requestContext;
	};
};
export const lucia = () => {
	return (requestContext) => requestContext;
};
