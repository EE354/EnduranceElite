import "lucia-auth/polyfill/node";
import type { KeySchema, SessionSchema } from "lucia-auth";
export type TestUserSchema = {
    id: string;
    username: string;
};
type QueryHandler<Schema> = {
    get: () => Promise<Schema[]>;
    insert: (data: Schema) => Promise<void>;
    clear: () => Promise<void>;
};
export type LuciaQueryHandler = {
    user?: QueryHandler<TestUserSchema>;
    session?: QueryHandler<SessionSchema>;
    key?: QueryHandler<KeySchema>;
};
export declare class Database {
    private readonly queryHandler;
    user: () => User;
    clear: () => Promise<void>;
    constructor(queryHandler: LuciaQueryHandler);
}
type ExtractQueryHandlerSchema<Q> = Q extends QueryHandler<infer Schema> ? Schema : never;
declare class Model<StoreName extends Extract<keyof LuciaQueryHandler, string>> {
    value: ExtractQueryHandlerSchema<LuciaQueryHandler[StoreName]>;
    protected readonly name: string;
    protected readonly queryHandler: LuciaQueryHandler;
    private storeQueryHandler;
    private readonly parent;
    constructor(name: StoreName, queryHandler: LuciaQueryHandler, value: ExtractQueryHandlerSchema<LuciaQueryHandler[StoreName]>, parent?: Model<any>[]);
    commit: () => Promise<void>;
    private safeCompare;
    compare: (target: unknown) => void;
    find: (target: unknown) => void;
    exists: () => Promise<void>;
    notExits: () => Promise<void>;
    update: (value: Partial<ExtractQueryHandlerSchema<LuciaQueryHandler[StoreName]>>) => void;
}
declare class User extends Model<"user"> {
    session: () => Session;
    key: (option: {
        primary: boolean;
        passwordDefined: boolean;
        oneTime: boolean;
    }) => Key;
    constructor(queryHandler: LuciaQueryHandler, options?: {
        userId?: string;
        username?: string;
    });
}
declare class Session extends Model<"session"> {
    constructor(queryHandler: LuciaQueryHandler, parent: Model<any>[], options: {
        userId: string;
    });
}
declare class Key extends Model<"key"> {
    constructor(queryHandler: LuciaQueryHandler, parent: Model<any>[], options: {
        userId: string;
        primary: boolean;
        passwordDefined: boolean;
        oneTime: boolean;
    });
}
export {};
