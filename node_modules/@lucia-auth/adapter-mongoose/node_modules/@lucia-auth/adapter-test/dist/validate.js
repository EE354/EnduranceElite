export const isNull = (data) => {
    if (data === null)
        return;
    typeError(data, "null");
};
export const isEmptyArray = (data) => {
    if (Array.isArray(data) && data.length === 0)
        return;
    typeError(data, "array");
};
export const expectErrorMessage = async (test, expectedValue) => {
    try {
        await test();
        throw new Error("No error was thrown");
    }
    catch (e) {
        if (typeof e !== "object" || e === null)
            throw typeError(e, "object");
        if ("message" in e && e.message === expectedValue)
            return;
        throw valueError("message" in e ? e.message : undefined, expectedValue, "Error message did not match");
    }
};
export const expectError = async (test) => {
    try {
        await test();
        throw new Error("No error was thrown");
    }
    catch (e) {
        // expect error
    }
};
export const typeError = (received, expected) => {
    logErrorResult(received, `type ${expected}`);
    return new Error("Target was not of expected type");
};
export const valueError = (received, expected, errorMessage) => {
    logErrorResult(received, expected);
    return new Error(errorMessage);
};
const logErrorResult = (received, expected) => {
    console.log("received: ");
    console.dir(received, { depth: null });
    console.log("expected: ");
    console.dir(expected, { depth: null });
};
